import _fs from "fs";
import { dew as _indexDewDew } from "tmp/index.dew.js";
import { dew as _indexDew2Dew } from "spawn-sync/index.dew.js";
import _child_process from "child_process";
import { dew as _CreateFileErrorDewDew } from "./errors/CreateFileError.dew.js";
import { dew as _ReadFileErrorDewDew } from "./errors/ReadFileError.dew.js";
import { dew as _RemoveFileErrorDewDew } from "./errors/RemoveFileError.dew.js";
import { dew as _LaunchEditorErrorDewDew } from "./errors/LaunchEditorError.dew.js";
import _process from "process";
var exports = {},
    _dewExec = false;

var _global = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;

export function dew() {
  if (_dewExec) return exports;
  _dewExec = true;
  var process = _process;
  // Generated by CoffeeScript 1.11.1

  /*
    ExternalEditor
    Kevin Gravier <kevin@mrkmg.com>
    MIT
   */
  (function () {
    var CreateFileError,
        ExternalEditor,
        FS,
        LaunchEditorError,
        ReadFileError,
        RemoveFileError,
        Spawn,
        SpawnSync,
        Temp,
        bind = function (fn, me) {
      return function () {
        return fn.apply(me, arguments);
      };
    };

    FS = _fs;
    Temp = _indexDewDew();
    SpawnSync = _indexDew2Dew();
    Spawn = _child_process.spawn;
    CreateFileError = _CreateFileErrorDewDew();
    ReadFileError = _ReadFileErrorDewDew();
    RemoveFileError = _RemoveFileErrorDewDew();
    LaunchEditorError = _LaunchEditorErrorDewDew();

    ExternalEditor = function () {
      ExternalEditor.edit = function (text) {
        var editor;

        if (text == null) {
          text = '';
        }

        editor = new ExternalEditor(text);
        editor.run();
        editor.cleanup();
        return editor.text;
      };

      ExternalEditor.editAsync = function (text, callback) {
        var editor;

        if (text == null) {
          text = '';
        }

        editor = new ExternalEditor(text);
        return editor.runAsync(function (error_run, response) {
          var error_cleanup;

          if (!error_run) {
            try {
              editor.cleanup();
            } catch (error) {
              error_cleanup = error;

              if (typeof callback === 'function') {
                callback(error_cleanup);
              }
            }

            return callback(null, response);
          } else {
            return callback(error_run) in typeof callback === 'function';
          }
        });
      };

      ExternalEditor.CreateFileError = CreateFileError;
      ExternalEditor.ReadFileError = ReadFileError;
      ExternalEditor.RemoveFileError = RemoveFileError;
      ExternalEditor.LaunchEditorError = LaunchEditorError;
      ExternalEditor.prototype.text = '';
      ExternalEditor.prototype.temp_file = void 0;
      ExternalEditor.prototype.editor = {
        bin: void 0,
        args: []
      };

      function ExternalEditor(text1) {
        (this || _global).text = text1 != null ? text1 : '';
        (this || _global).launchEditorAsync = bind((this || _global).launchEditorAsync, this || _global);
        (this || _global).launchEditor = bind((this || _global).launchEditor, this || _global);
        (this || _global).removeTemporaryFile = bind((this || _global).removeTemporaryFile, this || _global);
        (this || _global).readTemporaryFile = bind((this || _global).readTemporaryFile, this || _global);
        (this || _global).createTemporaryFile = bind((this || _global).createTemporaryFile, this || _global);
        (this || _global).determineEditor = bind((this || _global).determineEditor, this || _global);
        (this || _global).cleanup = bind((this || _global).cleanup, this || _global);
        (this || _global).runAsync = bind((this || _global).runAsync, this || _global);
        (this || _global).run = bind((this || _global).run, this || _global);
        this.determineEditor();
        this.createTemporaryFile();
      }

      ExternalEditor.prototype.run = function () {
        this.launchEditor();
        return this.readTemporaryFile();
      };

      ExternalEditor.prototype.runAsync = function (callback) {
        var error_launch;

        try {
          return this.launchEditorAsync(function (_this) {
            return function () {
              var error_read;

              try {
                _this.readTemporaryFile();

                if (typeof callback === 'function') {
                  return callback(null, _this.text);
                }
              } catch (error) {
                error_read = error;

                if (typeof callback === 'function') {
                  return callback(error_read);
                }
              }
            };
          }(this || _global));
        } catch (error) {
          error_launch = error;

          if (typeof callback === 'function') {
            return callback(error_launch);
          }
        }
      };

      ExternalEditor.prototype.cleanup = function () {
        return this.removeTemporaryFile();
      };

      ExternalEditor.prototype.determineEditor = function () {
        var args, ed, editor;
        ed = /^win/.test(process.platform) ? 'notepad' : 'vim';
        editor = process.env.VISUAL || process.env.EDITOR || ed;
        args = editor.split(/\s+/);
        (this || _global).bin = args.shift();
        return (this || _global).args = args;
      };

      ExternalEditor.prototype.createTemporaryFile = function () {
        var e;

        try {
          (this || _global).temp_file = Temp.tmpNameSync({});
          return FS.writeFileSync((this || _global).temp_file, (this || _global).text);
        } catch (error) {
          e = error;
          throw new CreateFileError(e);
        }
      };

      ExternalEditor.prototype.readTemporaryFile = function () {
        var e;

        try {
          return (this || _global).text = FS.readFileSync((this || _global).temp_file).toString();
        } catch (error) {
          e = error;
          throw new ReadFileError(e);
        }
      };

      ExternalEditor.prototype.removeTemporaryFile = function () {
        var e;

        try {
          return FS.unlinkSync((this || _global).temp_file);
        } catch (error) {
          e = error;
          throw new RemoveFileError(e);
        }
      };

      ExternalEditor.prototype.launchEditor = function () {
        var e;

        try {
          return SpawnSync((this || _global).bin, (this || _global).args.concat([(this || _global).temp_file]), {
            stdio: 'inherit'
          });
        } catch (error) {
          e = error;
          throw new LaunchEditorError(e);
        }
      };

      ExternalEditor.prototype.launchEditorAsync = function (callback) {
        var child_process, e;

        try {
          child_process = Spawn((this || _global).bin, (this || _global).args.concat([(this || _global).temp_file]), {
            stdio: 'inherit'
          });
          return child_process.on('exit', function () {
            if (typeof callback === 'function') {
              return callback();
            }
          });
        } catch (error) {
          e = error;
          throw new LaunchEditorError(e);
        }
      };

      return ExternalEditor;
    }();

    exports = ExternalEditor;
  }).call(exports);
  return exports;
}